<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [ ]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<?rfc strict="yes"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc docmapping="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc
 docName="draft-ietf-nfsv4-integrity-measurement-latest"
 category="std"
 submissionType="IETF"
 xml:lang="en">

<front>

<title abbrev="IMA for NFS Files">
Integrity Measurement for Network File System version 4
</title>

<author initials="C.L." surname="Lever" fullname="Charles Lever">
<organization abbrev="Oracle">Oracle Corporation</organization>
<address>
<postal>
<street></street>
<city></city>
<region></region>
<code></code>
<country>United States of America</country>
</postal>
<email>chuck.lever@oracle.com</email>
</address>
</author>

<date/>
<area>Transport</area>
<workgroup>Network File System Version 4</workgroup>

<abstract>
<t>
This document specifies an OPTIONAL extension
to NFS version 4 minor version 2
that enables Linux Integrity Measurement Architecture metadata (IMA)
to be conveyed between NFS version 4.2 servers and clients.
Integrity measurement
authenticates the creator of a file's content and
helps guarantee the content's integrity
end-to-end from creation to use.
</t>
</abstract>

</front>

<middle>

<section
 title="Introduction"
 anchor="section:B6F50BDB-73AC-4DCE-9254-00386F6277FC">
<t>
The security of software distribution systems
is complex and challenging,
especially as software distribution
has become increasingly decentralized.
An end administrator needs to trust that she is running
executables just as they are supplied by a software vendor;
in other words, that they have not been modified by malicious actors,
contracted system administration services, or broken hardware or software.
Software vendors want a guarantee that customer-installed executables
that fall under support contracts have similarly not been modified.
</t>
<t>
There already exist mechanisms that protect file data
during certain portions of a file's life cycle:
<list style="symbols">
<t>
Whole file system checksumming can verify so-called
Golden Master installation media before it is used
to install the software it contains.
</t>
<t>
File or block integrity mechanisms can protect data
at rest on storage servers.
</t>
<t>
For a distributed file system such as NFS,
transport layer security or a GSS integrity service
(as described in
<xref target="RFC7861"/>)
can protect data while it traverses a network
between a storage server and a client.
</t>
</list>
A more extensive mechanism is needed to guarantee
that no modification of a particular file has occurred
since it was created,
perhaps even after several generations of copies
have been made of the file's content.
</t>

<section
 title="The Linux Integrity Measurement Architecture"
 anchor="section:F09E4A19-531B-4771-A5AD-42B14E0BC030">
<t>
The Linux Integrity Measurement Architecture (IMA)
<xref target="SAILER"/>
provides assurance
that the content of files is unaltered and authentic to what was
originally written to those files.
The goal is to detect when
an attacker,
unintentional platform behavior,
or
local tinkering
has modified the content of a file,
either in transit or at rest.
</t>
<t>
This is done by separately storing metadata about a file's content
and then using that metadata to verify the content before it is used.
Verification of the content is entirely independent of the file system.
File systems, both local and remote, act simply as storage for both the
content and the metadata, both of which are opaque to the storage subsystem.
</t>
<t>
A rough informative description of this mechanism
is provided in the following subsections
to provide context for understanding the NFS protocol extension
described later in this document.
As the file system does not interpret IMA metadata,
this description is not necessary to implement the extension.
</t>

<section
 title="IMA Metadata"
 anchor="section:61675D23-3584-407E-BBB3-346DD170BFA1">
<t>
A cryptographically signed hash
stored separately from a file's content
serves as a strong check of file content integrity
and
authenticates the identity of the provider of the file's content.
The signer is verified at time of content use
via a web of trust commonly provided by PKI or
x.509 certificates
<xref target="RFC4158"/>.
</t>
<t>
The hash is typically computed using
either the SHA-1 or SHA-256 algorithm
and is stored as an HMAC
<xref target="RFC2104"/>.
For the purposes of this document,
we refer to this blob as "IMA metadata".
</t>
<t>
The precise format of this metadata is determined by policies
set by the local security administrator;
the metadata and its format are opaque to the mechanisms that store
or transport it (i.e., file systems).
The particulars of the PKI and the hash algorithm
are agreed upon out-of-band
and recognized by all participating IMA subsystems.
</t>
</section>

<section
 title="Creating and Verifying IMA Metadata"
 anchor="section:F6A13064-1B7B-4848-B172-431EAF1D4819">
<t>
In a typical deployment, an authority (such as a software vendor)
computes the hash of a file after its content has been finalized.
The hash is then signed and attached to the file.
The signer is typically linked to file content users
(such as customers of the software vendor)
by a public web of trust.
</t>
<t>
Before file content is to be used,
a security module locally re-computes the hash of the file content
and stores it in a cache.
This step is known as "measurement".
</t>
<t>
The next step is referred to as "appraisal".
The security module then reads the associated IMA metadata
and validates its signature.
If the signature is invalid or
the locally computed hash does not match the stored hash,
the security module applies an appraisal policy.
The file may be flagged in an audit log or
access to the file may be denied.
</t>
<t>
Observe that
the file and storage systems play no part in measurement or appraisal.
They act only as a conduit by which
file content
and
IMA metadata
move between at-rest storage
and the security module on the host where that content is to be used.
Both IMA metadata and file content are opaque to the storage subsystem.
</t>
</section>

<section
 title="Distributing and Protecting Keying Material"
 anchor="section:EA9E4277-096E-41C7-A824-89C186AC9E12">
<t>
A
<eref
 target="https://trustedcomputinggroup.org/wp-content/uploads/Trusted-Platform-Module-Summary_04292008.pdf">
Trusted Platform Module
</eref>
can seal key material used to sign and appraise file content.
Unprotected keys are not distributed by or stored in the file system.
Distributing and protecting such key material is outside the scope
of the extension specified in this document.
</t>
</section>

<section
 title="Using IMA to Protect NFS Files"
 anchor="section:61F4E746-933C-47A0-AEAD-EB165B5F53A4">
<t>
The protocol extension in this document enables
the storage and use of IMA metadata
so that measurement and appraisal can occur at point-of-use
on NFS client and server hosts.
This mechanism is similar to NFSv4 Security Labels
(specified in
<xref target="RFC7862"/> and others).
The purpose of the mechanism defined here is
to store security-related file metadata
that is not interpreted by the file system itself.
</t>
</section>

</section>

</section>

<section
 title="Requirements Language"
 anchor="section:5655ED6E-32DC-4233-B606-23AFBE39200E">
<t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY",
and "OPTIONAL" in this document are to be interpreted
as described in BCP 14
<xref target="RFC2119"/>
<xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.
</t>
</section>

<section
 title="Protocol Extension Considerations"
 anchor="section:EE671D6C-D026-4935-BDB5-D905E3EB6F66">
<t>
This document specifies an OPTIONAL extension to
NFS version 4 minor version 2
<xref target="RFC7862"/>,
hereafter referred to as NFS version 4.2.
NFS version 4.2 servers and clients implemented
without knowledge of this extension will continue to interoperate
with NFS version 4.2 clients and servers
that are aware of the extension, whether or not they support it.
</t>
<t>
Because
<xref target="RFC7862"/>
does not define NFS version 4.2 as non-extensible,
<xref target="RFC8178"/>
treats it as an extensible minor version.
Therefore this Standards Track RFC extends NFS version 4.2
but does not update
<xref target="RFC7862"/>
or
<xref target="RFC7863"/>.
</t>

<section
 title="XDR Extraction"
 anchor="section:F6B86801-63FC-4B65-B16E-C62AB12078D0">
<t>
<xref target="section:E7540F27-9406-454D-9FBE-B2EAC79A3920"/>
contains a description of an extension to the NFS version 4.2 protocol,
expressed in the External Data Representation (XDR) language
<xref target="RFC4506"/>.
This description is provided in a way that makes it simple
to extract into ready-to-compile form.
The reader can apply the following sed script to this
document to produce a machine-readable XDR description of
the extension.
<figure align="left">
<artwork xml:space="preserve" align="left">
&lt;CODE BEGINS&gt;

sed -n -e 's:^ */// ::p' -e 's:^ *///$::p'

&lt;CODE ENDS&gt;
</artwork>
</figure>
</t>
<t>
That is, if this document is in a file called "ima-extension.txt"
then the reader can do the following to extract an XDR description file:
<figure align="left">
<artwork xml:space="preserve" align="left">
&lt;CODE BEGINS&gt;

sed -n -e 's:^ */// ::p' -e 's:^ *///$::p'
     &lt; ima-extension.txt &gt; ima.x

&lt;CODE ENDS&gt;
</artwork>
</figure>
</t>
<t>
Once that extraction is done, these added lines need to be inserted into
an appropriate base XDR of the generated XDR from
<xref target="RFC7863"/>
together with XDR from any additional extensions to be recognized by
the implementation.
This will result in a ready-to-compile XDR file.
</t>
</section>

</section>

<section
 title="Managing IMA Metadata on NFS Files"
 anchor="section:42398ABB-62B5-484C-A02E-D7F0FDA7F4BA">

<section
 title="XDR Definition"
 anchor="section:E7540F27-9406-454D-9FBE-B2EAC79A3920">
<t>
This section defines a new data type to encapsulate
and a new OPTIONAL attribute to access and update
IMA metadata associated with a particular file.
</t>
<t>
To enable a single IMA metadata payload
to be retrieved or updated via a single RPC,
and to constrain the transport resources required for the
operations defined in this section,
the length of IMA metadata MUST NOT exceed 4096 bytes in length.
</t>
<t>
When an NFS version 4.2 server does not recognize,
or does recognize but does not support,
this new attribute,
the server responds in accordance with the requirements specified
in Section 4.3 of
<xref target="RFC8178"/>.
</t>

<figure align="left">
<artwork xml:space="preserve" align="left">
&lt;CODE BEGINS&gt;

   /// /*
   ///  * Copyright (c) 2019 IETF Trust and the person identified
   ///  * as author of the code.  All rights reserved.
   ///  *
   ///  * The author of the code is: C. Lever
   ///  */
   ///
   /// %/*
   /// % * New For Integrity Measurement support
   /// % */
   /// opaque                           ima_data4&lt;4096&gt;;
   ///
   /// const FATTR4_IMA = XXX;          /* to be assigned */
   ///
   /// %/*
   /// % *New value added to enum nfsstat4
   /// % */
   /// const NFS4ERR_INTEGRITY = YYYYY; /* to be assigned */

&lt;CODE ENDS&gt;
</artwork>
</figure>

<!-- RFC Editor:
In this document, please replace XXX with the FATTR4 number
assigned by the NFSV4 WG, and replace YYYYY with the NFS4ERR
code point assigned by the NFSV4 WG.
-->

<section
 title="NFS4ERR_INTEGRITY (Error Code YYYYY)"
 anchor="section:4AE2D6D4-A105-4E17-A93C-149E14A23F10">
<t>
The server rejected this request because
a data or metadata integrity check failed during its execution.
</t>

</section>

</section>

<section
 title="Detecting support for IMA Metadata"
 anchor="section:49517532-7084-4F57-A9E0-E6D9E539BD66">
<t>
An NFS version 4.2 client discovers support for IMA metadata
on an NFS version 4.2 server by sending an NFS GETATTR operation
that specifies the FATTR4_SUPPORTED_ATTRS attribute and
the FATTR4_IMA attribute.
When a server supports IMA metadata, it sets the FATTR4_IMA
attribute bit in the NFS GETATTR bitmask returned in the reply.
Otherwise that bit is clear.
</t>
<t>
An NFS version 4.2 server MUST NOT return NFS4ERR_INTEGRITY to a client
unless that client has queried the server for IMA metadata support
using the above mechanism.
The server identifies clients using their client_id4 for this purpose.
</t>

<section
 title="Reporting Server-Side IMA Appraisal Failures"
 anchor="section:845E57CD-BE87-4B6F-BD81-515474D9AAC8">
<t>
An NFS server that has rigorous integrity checking must
somehow report integrity-related failures to clients.
Until now, a server implementer chose amongst error codes
that were available in the base NFS version 4.2 protocol,
typically NFS4ERR_IO or NFS4ERR_ACCESS, even though these
errors have generic meanings that do not necessarily imply
an integrity-related failure.
</t>
<t>
Once the above FATTR4_SUPPORTED_ATTRS handshake is done,
the server has determined that a client
can properly handle the new NFS4ERR_INTEGRITY error code.
In instances where an NFS request fails
due to an integrity-related issue,
and the server has determined that the client recognizes
the NFS4ERR_INTEGRITY error code,
the server MAY return NFS4ERR_INTEGRITY for the following operations:
ACCESS,
COMMIT,
CREATE,
GETATTR,
GETDEVICELIST,
LINK,
LOOKUP,
LOOKUPP,
NVERIFY,
OPEN,
OPENATTR,
READ,
READDIR,
READLINK,
REMOVE,
RENAME,
SETATTR,
VERIFY,
WRITE.
</t>
<t>
This is useful to inform the client
(or the user, depending on the client implementation)
that access to the file's content was not blocked because of a
permissions setting but rather because an integrity check failed.
</t>
<t>
[ cel: this is still an open issue ]
</t>

</section>

</section>

<section
 title="Storing IMA Metadata"
 anchor="section:7167B240-32ED-47DB-903E-874A3A43FF9B">
<t>
An NFS version 4.2 client stores IMA metadata
by sending an NFS SETATTR operation
that specifies the FATTR4_IMA attribute and
targets the file system object
associated with the metadata to be stored.
This attribute completely replaces any previous FATTR4_IMA attribute
associated with that object.
Modifying an object in any other way MUST NOT alter or remove
FATTR4_IMA attributes.
</t>
<t>
To remove IMA metadata from an object,
the client sends a FATTR4_IMA attribute
whose length is zero.
</t>
<t>
When an NFS SETATTR is presented to an NFS version 4.2 server
with a credential that is not authorized
to replace a FATTR4_IMA attribute,
the server MUST respond with NFS4ERR_ACCESS.
</t>
<t>
When an NFS SETATTR is presented to an NFS version 4.2 server
with an ima_data4 field
whose length is larger than 4096 bytes,
the server MUST respond with NFS4ERR_INVAL.
</t>
<t>
When an NFS SETATTR is presented to an NFS version 4.2 server
and the target object resides in a file system
which supports FATTR4_IMA
but the object itself does not support the FATTR4_IMA attribute,
the server MUST respond with NFS4ERR_WRONGTYPE.
For example, if the server's file system supports associating
IMA metadata with regular files but not with sockets or FIFOs,
then the result of an attempt to associate IMA metadata with a FIFO
will be NFS4ERR_WRONGTYPE.
</t>
<t>
When an NFS SETATTR is presented to an NFS version 4.2 server
but the target object resides in a file system which does not
support the FATTR4_IMA attribute,
the server MUST respond with NFS4ERR_ATTRNOTSUPP.
</t>
<t>
When a client presents an NFS SETATTR that modifies FATTR4_IMA
along with other attributes and the server responds with
an error, the client can retry setting each attribute
separately to sort out which attribute is causing the
server to reject the NFS SETATTR operation.
</t>
<t>
A detailed description of the NFS SETATTR operation can be
found in Section 18.30 of
<xref target="RFC5661"/>.
</t>

<section
 title="Sending IMA Metadata When Creating a New Object"
 anchor="section:D7663BDC-A0C8-437D-88A5-1D79A3E7F9C2">
<t>
An alternate way to set an attribute is to provide the attribute
during an NFS OPEN(CREATE) operation.
Upon creation, an object has no content to protect.
If a client presents an FATTR4_IMA attribute
to an NFS version 4.2 server during NFS OPEN(CREATE),
the server MUST respond with NFS4ERR_INVAL.
</t>

</section>

<section
 title="Authorizing Updates to IMA Metadata"
 anchor="C17FEFF5-F9F8-46C4-AC3D-1B04DF704752">
<t>
An NFS version 4.2 server needs to ensure
that modifications to IMA metadata are done
only by appropriately authorized agents.
Although access to file content is typically controlled by
ACLs and permission bits,
these mechanisms do not apply to IMA metadata.
The question of "who is authorized to modify IMA metadata"
is left to local security policy.
</t>
<t>
Possible implementations include limiting IMA metadata update authority to:
<list style="hanging">
<t hangText="Particular users">
<vspace/>
The server may allow IMA metadata updates only by
UID 0
or
by a client's machine principal.
</t>
<t hangText="Particular clients">
<vspace/>
The server may allow IMA metadata updates only from specific client IP addresses.
</t>
<t hangText="File owners">
<vspace/>
The server may allow IMA metadata updates only by the file's owner or group owner.
</t>
</list>
</t>
<t>
[ cel: this is still an open issue. ]
</t>

</section>

</section>

<section
 title="Retrieving IMA Metadata"
 anchor="section:3F3277B1-50F2-4317-9707-1A27FE3B0112">
<t>
An NFS version 4.2 client retrieves IMA metadata
by retrieving the FATTR4_IMA attribute
via an NFS GETATTR operation,
specifying the file handle of the object
associated with the metadata to be retrieved.
</t>
<t>
The IMA subsystem typically manages its own cache
of this metadata to maintain reasonable performance.
The NFS client implementation MUST always pass
retrieval requests for this metadata to the server.
This metadata MUST NOT be cached by the NFS client.
</t>
<t>
When an NFS GETATTR is presented to an NFS version 4.2 server
and the target object resides in a file system
which supports the FATTR4_IMA attribute
but the object does not support the FATTR4_IMA attribute,
the server MUST respond with NFS4ERR_WRONGTYPE.
For example, if the server's file system supports associating
IMA metadata with regular files but not named attributes, then
the result of an attempt to retrieve IMA metadata on a named attribute
will be NFS4ERR_WRONGTYPE.
</t>
<t>
When an NFS GETATTR is presented to an NFS version 4.2 server
but the target object resides in a file system which does not
support FATTR4_IMA,
this does not result in an error and
the FATTR4_IMA attribute bit is cleared
in the server's response.
</t>
<t>
Otherwise, if the target object supports FATTR4_IMA
and there is no IMA metadata is available for the
target object,
the server returns a FATTR4_IMA attribute
whose length is zero.
</t>
<t>
When a client presents an NFS GETATTR that retrieves FATTR4_IMA
along with other attributes and the server responds with
an error, the client can retry by retrieving each attribute
separately to sort out which attribute is causing the
server to reject the NFS GETATTR operation.
</t>
<t>
A detailed description of the NFS GETATTR operation can be
found in Section 18.7 of
<xref target="RFC5661"/>.
</t>
</section>

<section
 title="Using NFS Attribute Fencing (VERIFY/NVERIFY)"
 anchor="section:14C3407B-4FE2-4300-82DF-D6ECC55BAABB">
<t>
The NFS VERIFY and NVERIFY operations,
described in Sections 18.31 and 18.15 of
<xref target="RFC5661"/> respectively,
permit a client to add a fence in an NFS COMPOUND where,
if a provided FATTR4 attribute does or does not match,
the server can force processing of that COMPOUND to stop.
The FATTR4_IMA attribute is a valid choice for these
operations.
</t>
<t>
The server MUST use a simple byte comparison to evaluate whether
the client-provided FATTR4_IMA matches the FATTR4_IMA attribute
associated with the target object.
If the server has a local IMA implementation,
it MAY prevent the use of the local FATTR4_IMA attribute value
for the purpose of this comparison (via EVM protection).
The server MUST respond with NFS4ERR_INTEGRITY in this case.
</t>

</section>

</section>

<section
 title="Operation"
 anchor="section:4EFFE51F-F07A-490A-9E15-8167D21D3D9D">

<section
 title="Terminology"
 anchor="section:54604E8A-1B3C-4571-B3EC-403567C43AF6">
<t>
To aid the discussion in this section, we define a few handy terms:
<list style="symbols">
<t>
An "integrity assessor module" is a security module,
separate from the file system,
that appraises file content based on a policy and
IMA measurement results.
</t>
<t>
A "participating client" is an NFS version 4.2 client that
supports the OPTIONAL extension described in this document
and
employs a integrity assessor module.
</t>
<t>
A "non-participating client" is an NFS version 4.2 client that
does not support the OPTIONAL extension described in this document
or
does not employ a integrity assessor module.
</t>
<t>
A "participating server" is an NFS version 4.2 server that
supports the OPTIONAL extension described in this document
and
its shared file systems can store IMA metadata.
A participating server is not required to implement
an integrity assessor module.
</t>
<t>
A "non-participating server" is an NFS version 4.2 server that
does not support the OPTIONAL extension described in this document
or
its shared file systems are not capable of storing IMA metadata.
</t>
</list>
</t>
<t>
In addition, there are intermediate modes of operation
on participating peers:
<list style="symbols">
<t>
A "full-function client" is a participating client that
supports updating remote IMA metadata.
</t>
<t>
A "fetch-only client" is a participating client that
does not support modifying IMA metadata
on a participating server.
</t>
<t>
A "full-function server" is a participating server that
supports updating IMA metadata
that resides on local shared file systems.
</t>
<t>
A "store-only server" is a participating server where
there is only remote access to IMA metadata.
</t>
</list>
</t>
</section>

<section
 title="Instantiating IMA Metadata"
 anchor="section:548BF993-DE7D-4752-80C5-6628073606BE">
<t>
Once a file is written, IMA metadata is generated
and signed by an appropriate trust authority.
Using the OPTIONAL extension specified in this document,
the information can be associated with a file
on either a full-function server or client using
a tool with appropriate privileges that writes IMA metadata
to the shared file system.
When using a store-only server, only a full-function client
can place IMA metadata in the shared file system.
</t>
<t>
Typically, once IMA metadata is associated with a file,
the file's content is essentially immutable, even if the file
has write permissions.
This is because changing the content without updating the associated
IMA metadata will make the content inaccessible,
depending on the appraisal policy in effect.
Thus updating the file content usually requires generating
fresh IMA metadata.
</t>

</section>

<section
 title="Interaction With Non-Participating Implementations"
 anchor="section:2004C060-4504-44A6-A702-CDCA40C006C6">
<t>
Because the protocol extension described herein is OPTIONAL,
clients and servers that support it must necessarily interact
with clients and servers that do not support it.
To set the stage for a discussion of interactions that might occur,
consider the following possible simple appraisal policies
that might be adopted by an integrity assessment module:
<list style="hanging">
<t hangText="Strict:">
Access is prevented to a file's content if the file has no IMA metadata
or if the extant IMA metadata fails to verify the file content.
Otherwise access to the file's content is not prevented.
</t>
<t hangText="Audit:">
Access to a file's content is never prevented.
Warnings are reported when a file has no IMA metadata
or when extant IMA metadata fails to verify the file's content.
</t>
<t hangText="Disabled:">
Access to file content is never prevented and IMA metadata is ignored.
</t>
</list>
</t>
<t>
Given the above example policies
and the definitions we provided earlier for
participating and non-participating implementations,
the following statements are true:
<list style="symbols">
<t>
A participating client that uses the Disabled policy
is equivalent to
a non-participating client.
</t>
<t>
A non-participating client
never prevents access to file content on a participating server.
</t>
<t>
A participating client using the Strict policy
never allows access to files stored on a non-participating server.
</t>
</list>
</t>
<t>
An integrity assessor module on an NFS version 4.2 peer needs to be prepared to deal
with IMA metadata it does not recognize or cannot parse.
Its policy may treat this case as a appraisal failure.
</t>
<t>
Note that an NFS version 4.2 server may use a integrity assessor module
to prevent access by local users to protected files.
To enable NFS version 4.2 clients to do their own assessment,
an NFS version 4.2 server should not prevent remote access
to participating clients
if local integrity assessment fails.
</t>
</section>

</section>

<!-- RFC Editor:
Please remove the following section and the reference to RFC 7942
before this document is published.
-->
<section
 title="Implementation Status"
 anchor="section:887D5902-4FF5-44F3-AA9C-FE0E6485A53E">
<t>
This section records the status of known implementations of the
protocol defined by this specification at the time of posting of
this Internet-Draft, and is based on a proposal described in
<xref target="RFC7942"/>.
The description of implementations in this section is
intended to assist the IETF in its decision processes in
progressing drafts to RFCs.
</t>
<t>
Please note that the listing of any individual implementation here
does not imply endorsement by the IETF.
Furthermore, no effort has been spent to verify the information
presented here that was supplied by IETF contributors.
This is not intended as, and must not be construed to be, a
catalog of available implementations or their features.
Readers are advised to note that other implementations may exist.
 </t>

<section
 title="Linux NFS server and client"
 anchor="section:BF03B3A2-4483-4404-9E7A-F60FCD850F31">
<t>
<list style="hanging" hangIndent="11">
<t hangText="Organization:">
The Linux Foundation
</t>
<t hangText="URL:">
https://www.kernel.org
</t>
<t hangText="Maturity:">
Prototype software based on early versions of this document.
</t>
<t hangText="Coverage:">
The bulk of this specification is implemented.
</t>
<t hangText="Licensing:">
GPLv2
</t>
<t hangText="Implementation experience:">
No comments from implementors.
</t>
</list>
</t>
</section>

</section>

<section
 title="Security Considerations"
 anchor="section:83D5C960-0148-42FA-93E4-3DE7F96EFD34">
<t>
The design of the OPTIONAL extension described in this document assumes that
all IMA metadata is keyed or otherwise cryptographically
signed by a trust authority
to prevent unwanted alteration at rest or in transit.
</t>
<t>
When IMA metadata for a file exists and the end host has adopted an IMA policy,
the content of a file is protected from creation to use.
Receivers can reliably detect unintentional or malicious alteration of file content
by verifying its content using the file's IMA metadata.
Additional protection of file content while at rest or in transit
on an untrusted network is unnecessary.
</t>
<t>
Likewise, receivers can also reliably detect unintentional or malicious alteration
of IMA metadata that is cryptographically signed,
simply by verifying its signature.
Additional protection of signed metadata
while at rest or in transit on an untrusted network is unnecessary.
</t>
<t>
Like other mechanisms that protect data integrity during transit,
a malicious agent or a network malfunction
can create a denial-of-service condition
by repeatedly triggering integrity verification failures on NFS version 4.2 clients.
</t>
<t>
To prevent a malicious denial-of-service attempt
by altering IMA metadata at rest,
an NFS version 4.2 server can enforce a suitable level of privilege
before authorizing a local or remote agent to alter this information.
See
<xref target="C17FEFF5-F9F8-46C4-AC3D-1B04DF704752"/>
for more detail.
</t>
</section>

<section
 title="IANA Considerations"
 anchor="section:E0578AF8-A3AB-41E0-9626-654F2593B8C4">
<t>
This document has no IANA actions.
</t>
</section>

</middle>

<back>

<references title="Normative References">
<?rfc include="reference.RFC.2119.xml"?>
<?rfc include="reference.RFC.4506.xml"?>
<?rfc include="reference.RFC.5661.xml"?>
<?rfc include="reference.RFC.7862.xml"?>
<?rfc include="reference.RFC.7863.xml"?>
<?rfc include="reference.RFC.7942.xml"?>
<?rfc include="reference.RFC.8174.xml"?>
<?rfc include="reference.RFC.8178.xml"?>

</references>

<references title="Informative References">
<?rfc include="reference.RFC.2104.xml"?>
<?rfc include="reference.RFC.4158.xml"?>
<?rfc include="reference.RFC.5662.xml"?>
<?rfc include="reference.RFC.7861.xml"?>

<reference
 anchor="SAILER">
<front>
<title>Design and Implementation of a TCG-based Integrity Measurement Architecture</title>
<author initials="R.S." surname="Sailer" fullname="Reiner Sailer"></author>
<author initials="X.Z." surname="Zhang" fullname="Xiaolan Zhang"></author>
<author initials="T.J." surname="Jaeger" fullname="Trent Jaeger"></author>
<author initials="L.D." surname="van Doorn" fullname="Leendert van Doorn"></author>
<date month="August" year="2004"/>
</front>
<seriesInfo name="Proceedings of the" value="13th USENIX Security Symposium"/>
</reference>

</references>

<section
 title="Acknowledgments"
 anchor="section:DC42BB79-3C5C-4FD8-9018-EF1C6F06FA74"
 numbered="no">
<t>
The author wishes to thank Mimi Zohar and James Morris
for their early review of the concepts in this document,
Wim Coekaerts for his encouragement of this work,
and
Dave Noveck for his work on NFS version 4 extensibility.
</t>
<t>
The author wishes to acknowledge review comments from
Dave Noveck,
Craig Everhart,
and
Bruce Fields
which helped to make this a better document.
</t>
<t>
The XDR extraction conventions were
first described by the authors of the NFS version 4.1
XDR specification
<xref target="RFC5662"/>.
Herbert van den Bergh suggested the replacement sed
script used in this document.
</t>
<t>
Special thanks go to
Transport Area Director Magnus Westerlund,
NFSV4 Working Group Chairs Spencer Shepler and Brian Pawlowski,
and
NFSV4 Working Group Secretary Thomas Haynes
for their support.
</t>
</section>

</back>

</rfc>
